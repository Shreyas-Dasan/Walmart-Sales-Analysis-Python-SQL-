SELECT COUNT(*) FROM WALMART

SELECT * FROM WALMART

SELECT COUNT(*), PAYMENT_METHOD 
FROM WALMART
GROUP BY 2

SELECT COUNT(DISTINCT BRANCH)
FROM WALMART

SELECT MIN(QUANTITY), MAX(QUANTITY)
FROM 
WALMART


-- 1) FIND THE DIFF PAYMENT METHOD AND NO OF TRANSACTIONS, NO OF QUANTITY SOLD
SELECT PAYMENT_METHOD, COUNT(*) AS TRANSACTIONS, SUM(QUANTITY) AS QUANTITY_SOLD
FROM WALMART
GROUP BY 1
ORDER BY 3 DESC


-- 2) IDENTIFY THE HIGHEST RATED CATEGORY IN EACH BRANCH DISPLAYING THE BRANCH, CATEGORY AND AVERAGE RATING
SELECT * FROM (SELECT 
BRANCH, CATEGORY, AVG(RATING) AS AVG_RATING,
RANK() OVER(PARTITION BY BRANCH ORDER BY AVG(RATING) DESC) AS HIGH_RATE
FROM WALMART
GROUP BY 1,2)
WHERE HIGH_RATE = 1


-- 3) IDENTIFY THE BUSIEST DAY FOR EACH BRANCH BASED ON THE NUMBER OF TRANSACTIONS
SELECT * FROM (
SELECT 
BRANCH,
TO_CHAR(TO_DATE(DATE,'DD/MM/YY'),'DAY') AS DAY_NAME,
COUNT(*) AS TRANSACTIONS,
RANK() OVER(PARTITION BY BRANCH ORDER BY BRANCH, COUNT(*) DESC) AS RANKING
FROM WALMART
GROUP BY 1,2)
WHERE RANKING = '1'


-- 4) CALCULATE THE TOTAL QUANTITY OF ITEMS SOLD PER PAYMENT METHOD. LIST PAYMENT AND TOTAL_QUANTITY.
SELECT PAYMENT_METHOD, COUNT(*) AS TRASACTIONS, SUM(QUANTITY) AS TOTAL_QUANTITY
FROM WALMART
GROUP BY 1
ORDER BY 3 DESC


-- 5) DETERMINE THE AVG, MIN AND MAX RATING OF PRODUCTS FOR EACH CITY. LIST THE CITY, AVERAGE_RATING, MIN_RATING, AND MAX_RATING.
SELECT CITY, 
	CATEGORY, 
	AVG(RATING) AS AVG_RATING, 
	MIN(RATING) AS MIN_RATING, 
	MAX(RATING) AS MAX_RATING
FROM WALMART
GROUP BY 1,2


-- 6) CALCULATE THE TOTAL PROFIT FOR EACH CATEGORY BY CONSIDERING TOTL_PROFIT AS (UNIT_PRICE * QUANTITY * PROFIT_MARGIN).
--    LIST CATEGORY AND TOTAL_PROFIT, ORDERED FROM HIGHEST TO LOWEST PROFIT.
SELECT CATEGORY,
	SUM(TOTAL) AS TOTAL_REVENUE,
	SUM(TOTAL * PROFIT_MARGIN) AS TOTAL_PROFIT
FROM WALMART
GROUP BY 1


-- 7) DETERMINE THE MOST COMMON PAYMENT METHOD FOR EACH BRANCH. DISPLAY BRANCH AND THE PREFFERED PAYMENT METHOD.
WITH CTE AS
( 
SELECT BRANCH,
	PAYMENT_METHOD,
	COUNT(PAYMENT_METHOD) AS COUNTING,
	RANK() OVER (PARTITION BY BRANCH ORDER BY COUNT(PAYMENT_METHOD) DESC) AS RANKING
FROM WALMART
GROUP BY 1,2
)
SELECT * FROM CTE
WHERE RANKING = 1


-- 8) CATEGORIZE SALES INTO 3 GROUP MORNING, AFTERNOON, EVENING. FIND OUT WHICH OF THE SHIFT AND NUMBER OF INVOICES.
WITH CTE AS (SELECT BRANCH,
	CASE 
		WHEN EXTRACT(HOUR FROM (TIME::TIME)) < 12 THEN 'MORNING'
		WHEN EXTRACT(HOUR FROM (TIME::TIME)) BETWEEN 12 AND 17 THEN 'AFTERNOON'
		ELSE 'EVENING'
	END DAY_TIME,
	COUNT(*),
	RANK() OVER(PARTITION BY BRANCH ORDER BY BRANCH, COUNT(*) DESC) AS RANKING
FROM WALMART
GROUP BY 1, 2)
SELECT * FROM CTE
WHERE RANKING = 1


-- 9)  IDENTIFY 5 BRANCH WITH DECRESE RATIO IN REVENUE COMPARE TO LAST YEAR (CURRENT YEAR 2023 AND LAST YEAR 2022).
WITH 
REVENUE_2022 AS
(
SELECT  BRANCH, 
	SUM(TOTAL) AS REVENUE
FROM WALMART
WHERE EXTRACT (YEAR FROM TO_DATE(DATE,'DD/MM/YY')) = 2022
GROUP BY 1
),
REVENUE_2023 AS
(
SELECT BRANCH,
	SUM(TOTAL) AS REVENUE
FROM WALMART
WHERE EXTRACT(YEAR FROM TO_DATE(DATE,'DD/MM/YY')) = 2023
GROUP BY 1
)

SELECT LY.BRANCH, 
	LY.REVENUE AS LAST_YEAR_REVENUE, 
	CY.REVENUE AS CURRENT_YEAR_REVENUE,
	ROUND((LY.REVENUE - CY.REVENUE)::NUMERIC/LY.REVENUE::NUMERIC * 100, 2) AS REVENUE_DECREASE_RATIO
FROM REVENUE_2022 AS LY 
JOIN REVENUE_2023 AS CY
ON LY.BRANCH = CY.BRANCH
WHERE LY.REVENUE > CY.REVENUE
ORDER BY 4 DESC 
LIMIT 5

